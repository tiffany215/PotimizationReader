package shuhai.readercore.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import shuhai.readercore.dao.MarkEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARK_ENTITY".
*/
public class MarkEntityDao extends AbstractDao<MarkEntity, Void> {

    public static final String TABLENAME = "MARK_ENTITY";

    /**
     * Properties of entity MarkEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Articleid = new Property(0, Integer.class, "articleid", false, "ARTICLEID");
        public final static Property Chpid = new Property(1, Integer.class, "chpid", false, "CHPID");
        public final static Property Begin = new Property(2, Integer.class, "begin", false, "BEGIN");
        public final static Property Word = new Property(3, String.class, "word", false, "WORD");
        public final static Property Time = new Property(4, Integer.class, "time", false, "TIME");
        public final static Property Chporder = new Property(5, Integer.class, "chporder", false, "CHPORDER");
        public final static Property Isfree = new Property(6, Integer.class, "isfree", false, "ISFREE");
        public final static Property Owner = new Property(7, String.class, "owner", false, "OWNER");
        public final static Property Chpname = new Property(8, String.class, "chpname", false, "CHPNAME");
    };


    public MarkEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MarkEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARK_ENTITY\" (" + //
                "\"ARTICLEID\" INTEGER," + // 0: articleid
                "\"CHPID\" INTEGER," + // 1: chpid
                "\"BEGIN\" INTEGER," + // 2: begin
                "\"WORD\" TEXT," + // 3: word
                "\"TIME\" INTEGER," + // 4: time
                "\"CHPORDER\" INTEGER," + // 5: chporder
                "\"ISFREE\" INTEGER," + // 6: isfree
                "\"OWNER\" TEXT," + // 7: owner
                "\"CHPNAME\" TEXT);"); // 8: chpname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARK_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MarkEntity entity) {
        stmt.clearBindings();
 
        Integer articleid = entity.getArticleid();
        if (articleid != null) {
            stmt.bindLong(1, articleid);
        }
 
        Integer chpid = entity.getChpid();
        if (chpid != null) {
            stmt.bindLong(2, chpid);
        }
 
        Integer begin = entity.getBegin();
        if (begin != null) {
            stmt.bindLong(3, begin);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(4, word);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        Integer chporder = entity.getChporder();
        if (chporder != null) {
            stmt.bindLong(6, chporder);
        }
 
        Integer isfree = entity.getIsfree();
        if (isfree != null) {
            stmt.bindLong(7, isfree);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(8, owner);
        }
 
        String chpname = entity.getChpname();
        if (chpname != null) {
            stmt.bindString(9, chpname);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MarkEntity readEntity(Cursor cursor, int offset) {
        MarkEntity entity = new MarkEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // articleid
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // chpid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // begin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // word
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // chporder
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isfree
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // owner
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // chpname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MarkEntity entity, int offset) {
        entity.setArticleid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setChpid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBegin(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWord(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChporder(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsfree(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOwner(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChpname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MarkEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MarkEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
