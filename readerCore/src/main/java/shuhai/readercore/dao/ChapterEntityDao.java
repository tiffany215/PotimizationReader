package shuhai.readercore.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import shuhai.readercore.dao.ChapterEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_ENTITY".
*/
public class ChapterEntityDao extends AbstractDao<ChapterEntity, Void> {

    public static final String TABLENAME = "CHAPTER_ENTITY";

    /**
     * Properties of entity ChapterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Articleid = new Property(0, Integer.class, "articleid", false, "ARTICLEID");
        public final static Property Chpid = new Property(1, Integer.class, "chpid", false, "CHPID");
        public final static Property Chpnamme = new Property(2, String.class, "chpnamme", false, "CHPNAMME");
        public final static Property Chptype = new Property(3, Integer.class, "chptype", false, "CHPTYPE");
        public final static Property Chiporder = new Property(4, Integer.class, "chiporder", false, "CHIPORDER");
    };


    public ChapterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_ENTITY\" (" + //
                "\"ARTICLEID\" INTEGER," + // 0: articleid
                "\"CHPID\" INTEGER," + // 1: chpid
                "\"CHPNAMME\" TEXT," + // 2: chpnamme
                "\"CHPTYPE\" INTEGER," + // 3: chptype
                "\"CHIPORDER\" INTEGER);"); // 4: chiporder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChapterEntity entity) {
        stmt.clearBindings();
 
        Integer articleid = entity.getArticleid();
        if (articleid != null) {
            stmt.bindLong(1, articleid);
        }
 
        Integer chpid = entity.getChpid();
        if (chpid != null) {
            stmt.bindLong(2, chpid);
        }
 
        String chpnamme = entity.getChpnamme();
        if (chpnamme != null) {
            stmt.bindString(3, chpnamme);
        }
 
        Integer chptype = entity.getChptype();
        if (chptype != null) {
            stmt.bindLong(4, chptype);
        }
 
        Integer chiporder = entity.getChiporder();
        if (chiporder != null) {
            stmt.bindLong(5, chiporder);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ChapterEntity readEntity(Cursor cursor, int offset) {
        ChapterEntity entity = new ChapterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // articleid
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // chpid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chpnamme
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // chptype
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // chiporder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChapterEntity entity, int offset) {
        entity.setArticleid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setChpid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setChpnamme(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChptype(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setChiporder(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChapterEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ChapterEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
