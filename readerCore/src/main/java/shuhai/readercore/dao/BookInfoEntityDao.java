package shuhai.readercore.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import shuhai.readercore.dao.BookInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO_ENTITY".
*/
public class BookInfoEntityDao extends AbstractDao<BookInfoEntity, Long> {

    public static final String TABLENAME = "BOOK_INFO_ENTITY";

    /**
     * Properties of entity BookInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Articleid = new Property(0, long.class, "articleid", true, "ARTICLEID");
        public final static Property Articlename = new Property(1, String.class, "articlename", false, "ARTICLENAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Bkbmurl = new Property(3, String.class, "bkbmurl", false, "BKBMURL");
        public final static Property Endtype = new Property(4, Integer.class, "endtype", false, "ENDTYPE");
        public final static Property Newchpname = new Property(5, String.class, "newchpname", false, "NEWCHPNAME");
        public final static Property Owner = new Property(6, String.class, "owner", false, "OWNER");
        public final static Property Readtime = new Property(7, Integer.class, "readtime", false, "READTIME");
        public final static Property Lastreadchporder = new Property(8, Integer.class, "lastreadchporder", false, "LASTREADCHPORDER");
        public final static Property Bktype = new Property(9, Integer.class, "bktype", false, "BKTYPE");
        public final static Property Newchporder = new Property(10, Integer.class, "newchporder", false, "NEWCHPORDER");
    };


    public BookInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO_ENTITY\" (" + //
                "\"ARTICLEID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: articleid
                "\"ARTICLENAME\" TEXT," + // 1: articlename
                "\"AUTHOR\" TEXT," + // 2: author
                "\"BKBMURL\" TEXT," + // 3: bkbmurl
                "\"ENDTYPE\" INTEGER," + // 4: endtype
                "\"NEWCHPNAME\" TEXT," + // 5: newchpname
                "\"OWNER\" TEXT," + // 6: owner
                "\"READTIME\" INTEGER," + // 7: readtime
                "\"LASTREADCHPORDER\" INTEGER," + // 8: lastreadchporder
                "\"BKTYPE\" INTEGER," + // 9: bktype
                "\"NEWCHPORDER\" INTEGER);"); // 10: newchporder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BookInfoEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getArticleid());
 
        String articlename = entity.getArticlename();
        if (articlename != null) {
            stmt.bindString(2, articlename);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String bkbmurl = entity.getBkbmurl();
        if (bkbmurl != null) {
            stmt.bindString(4, bkbmurl);
        }
 
        Integer endtype = entity.getEndtype();
        if (endtype != null) {
            stmt.bindLong(5, endtype);
        }
 
        String newchpname = entity.getNewchpname();
        if (newchpname != null) {
            stmt.bindString(6, newchpname);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(7, owner);
        }
 
        Integer readtime = entity.getReadtime();
        if (readtime != null) {
            stmt.bindLong(8, readtime);
        }
 
        Integer lastreadchporder = entity.getLastreadchporder();
        if (lastreadchporder != null) {
            stmt.bindLong(9, lastreadchporder);
        }
 
        Integer bktype = entity.getBktype();
        if (bktype != null) {
            stmt.bindLong(10, bktype);
        }
 
        Integer newchporder = entity.getNewchporder();
        if (newchporder != null) {
            stmt.bindLong(11, newchporder);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BookInfoEntity readEntity(Cursor cursor, int offset) {
        BookInfoEntity entity = new BookInfoEntity( //
            cursor.getLong(offset + 0), // articleid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // articlename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bkbmurl
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // endtype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // newchpname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // owner
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // readtime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // lastreadchporder
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // bktype
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // newchporder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BookInfoEntity entity, int offset) {
        entity.setArticleid(cursor.getLong(offset + 0));
        entity.setArticlename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBkbmurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndtype(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNewchpname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOwner(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReadtime(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLastreadchporder(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBktype(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setNewchporder(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BookInfoEntity entity, long rowId) {
        entity.setArticleid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BookInfoEntity entity) {
        if(entity != null) {
            return entity.getArticleid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
