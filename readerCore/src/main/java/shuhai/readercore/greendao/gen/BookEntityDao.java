package shuhai.readercore.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import shuhai.readercore.bean.BookEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_ENTITY".
*/
public class BookEntityDao extends AbstractDao<BookEntity, Long> {

    public static final String TABLENAME = "BOOK_ENTITY";

    /**
     * Properties of entity BookEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleId = new Property(1, int.class, "articleId", false, "ARTICLE_ID");
        public final static Property ArticleName = new Property(2, String.class, "articleName", false, "ARTICLE_NAME");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property BookType = new Property(5, int.class, "bookType", false, "BOOK_TYPE");
        public final static Property Owner = new Property(6, String.class, "owner", false, "OWNER");
        public final static Property FullFlag = new Property(7, int.class, "fullFlag", false, "FULL_FLAG");
        public final static Property LastReadTime = new Property(8, int.class, "lastReadTime", false, "LAST_READ_TIME");
        public final static Property LastReadChapterOrder = new Property(9, int.class, "lastReadChapterOrder", false, "LAST_READ_CHAPTER_ORDER");
        public final static Property LatestChapterOrder = new Property(10, int.class, "latestChapterOrder", false, "LATEST_CHAPTER_ORDER");
        public final static Property LatestChatperName = new Property(11, String.class, "latestChatperName", false, "LATEST_CHATPER_NAME");
    }


    public BookEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ARTICLE_ID\" INTEGER NOT NULL UNIQUE ," + // 1: articleId
                "\"ARTICLE_NAME\" TEXT," + // 2: articleName
                "\"AUTHOR\" TEXT," + // 3: author
                "\"COVER\" TEXT," + // 4: cover
                "\"BOOK_TYPE\" INTEGER NOT NULL ," + // 5: bookType
                "\"OWNER\" TEXT," + // 6: owner
                "\"FULL_FLAG\" INTEGER NOT NULL ," + // 7: fullFlag
                "\"LAST_READ_TIME\" INTEGER NOT NULL ," + // 8: lastReadTime
                "\"LAST_READ_CHAPTER_ORDER\" INTEGER NOT NULL ," + // 9: lastReadChapterOrder
                "\"LATEST_CHAPTER_ORDER\" INTEGER NOT NULL ," + // 10: latestChapterOrder
                "\"LATEST_CHATPER_NAME\" TEXT);"); // 11: latestChatperName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticleId());
 
        String articleName = entity.getArticleName();
        if (articleName != null) {
            stmt.bindString(3, articleName);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
        stmt.bindLong(6, entity.getBookType());
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(7, owner);
        }
        stmt.bindLong(8, entity.getFullFlag());
        stmt.bindLong(9, entity.getLastReadTime());
        stmt.bindLong(10, entity.getLastReadChapterOrder());
        stmt.bindLong(11, entity.getLatestChapterOrder());
 
        String latestChatperName = entity.getLatestChatperName();
        if (latestChatperName != null) {
            stmt.bindString(12, latestChatperName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticleId());
 
        String articleName = entity.getArticleName();
        if (articleName != null) {
            stmt.bindString(3, articleName);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
        stmt.bindLong(6, entity.getBookType());
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(7, owner);
        }
        stmt.bindLong(8, entity.getFullFlag());
        stmt.bindLong(9, entity.getLastReadTime());
        stmt.bindLong(10, entity.getLastReadChapterOrder());
        stmt.bindLong(11, entity.getLatestChapterOrder());
 
        String latestChatperName = entity.getLatestChatperName();
        if (latestChatperName != null) {
            stmt.bindString(12, latestChatperName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookEntity readEntity(Cursor cursor, int offset) {
        BookEntity entity = new BookEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // articleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // articleName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.getInt(offset + 5), // bookType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // owner
            cursor.getInt(offset + 7), // fullFlag
            cursor.getInt(offset + 8), // lastReadTime
            cursor.getInt(offset + 9), // lastReadChapterOrder
            cursor.getInt(offset + 10), // latestChapterOrder
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // latestChatperName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleId(cursor.getInt(offset + 1));
        entity.setArticleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookType(cursor.getInt(offset + 5));
        entity.setOwner(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFullFlag(cursor.getInt(offset + 7));
        entity.setLastReadTime(cursor.getInt(offset + 8));
        entity.setLastReadChapterOrder(cursor.getInt(offset + 9));
        entity.setLatestChapterOrder(cursor.getInt(offset + 10));
        entity.setLatestChatperName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
