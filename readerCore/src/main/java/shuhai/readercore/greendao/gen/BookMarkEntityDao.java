package shuhai.readercore.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import shuhai.readercore.bean.BookMarkEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_MARK_ENTITY".
*/
public class BookMarkEntityDao extends AbstractDao<BookMarkEntity, Long> {

    public static final String TABLENAME = "BOOK_MARK_ENTITY";

    /**
     * Properties of entity BookMarkEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleId = new Property(1, int.class, "articleId", false, "ARTICLE_ID");
        public final static Property ChapterId = new Property(2, int.class, "chapterId", false, "CHAPTER_ID");
        public final static Property Begin = new Property(3, int.class, "begin", false, "BEGIN");
        public final static Property Word = new Property(4, String.class, "word", false, "WORD");
        public final static Property Time = new Property(5, int.class, "time", false, "TIME");
        public final static Property ChapterOrder = new Property(6, int.class, "chapterOrder", false, "CHAPTER_ORDER");
        public final static Property IsFree = new Property(7, int.class, "isFree", false, "IS_FREE");
        public final static Property Owner = new Property(8, String.class, "owner", false, "OWNER");
        public final static Property ChapterName = new Property(9, String.class, "chapterName", false, "CHAPTER_NAME");
    }


    public BookMarkEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookMarkEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_MARK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ARTICLE_ID\" INTEGER NOT NULL ," + // 1: articleId
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 2: chapterId
                "\"BEGIN\" INTEGER NOT NULL ," + // 3: begin
                "\"WORD\" TEXT," + // 4: word
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"CHAPTER_ORDER\" INTEGER NOT NULL ," + // 6: chapterOrder
                "\"IS_FREE\" INTEGER NOT NULL ," + // 7: isFree
                "\"OWNER\" TEXT," + // 8: owner
                "\"CHAPTER_NAME\" TEXT);"); // 9: chapterName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_MARK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookMarkEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticleId());
        stmt.bindLong(3, entity.getChapterId());
        stmt.bindLong(4, entity.getBegin());
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(5, word);
        }
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getChapterOrder());
        stmt.bindLong(8, entity.getIsFree());
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(9, owner);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(10, chapterName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookMarkEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticleId());
        stmt.bindLong(3, entity.getChapterId());
        stmt.bindLong(4, entity.getBegin());
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(5, word);
        }
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getChapterOrder());
        stmt.bindLong(8, entity.getIsFree());
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(9, owner);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(10, chapterName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookMarkEntity readEntity(Cursor cursor, int offset) {
        BookMarkEntity entity = new BookMarkEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // articleId
            cursor.getInt(offset + 2), // chapterId
            cursor.getInt(offset + 3), // begin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // word
            cursor.getInt(offset + 5), // time
            cursor.getInt(offset + 6), // chapterOrder
            cursor.getInt(offset + 7), // isFree
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // owner
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // chapterName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookMarkEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleId(cursor.getInt(offset + 1));
        entity.setChapterId(cursor.getInt(offset + 2));
        entity.setBegin(cursor.getInt(offset + 3));
        entity.setWord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getInt(offset + 5));
        entity.setChapterOrder(cursor.getInt(offset + 6));
        entity.setIsFree(cursor.getInt(offset + 7));
        entity.setOwner(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChapterName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookMarkEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookMarkEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookMarkEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
